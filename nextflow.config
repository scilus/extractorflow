process {
    publishDir = [path: {"./results_extractorflow/intermediate_processes/$sid/$task.process"}, enabled: false]
    scratch = true
    errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
    maxRetries = 3
    maxErrors = -1
    stageInMode = 'copy'
    stageOutMode = 'rsync'
    tag = { "$sid" }
    afterScript = 'sleep 1'
}

cleanup = true
singularity.autoMounts = true

params {
  template_space="mni_space"
  orig_space="orig_space"
  final_output_mni_space = [path: {"./results_extractorflow/final_outputs/$sid/$params.template_space/"}, mode: 'copy']
  final_output_bundles_mni_space = [path: {"./results_extractorflow/final_outputs/$sid/$params.template_space/bundles/"}, mode: 'copy']
  final_output_orig_space = [path: {"./results_extractorflow/final_outputs/$sid/$params.orig_space/"}, mode: 'copy']
  final_output_bundles_orig_space = [path: {"./results_extractorflow/final_outputs/$sid/$params.orig_space/bundles/"}, mode: 'copy']

  //**Template T1 path**//
  template_t1="/human-data/mni_152_sym_09c/t1"
  run_bet=false
  extended=false
  orig=false

  keep_intermediate_steps=false

  quick_registration=false
  registration_script="antsRegistrationSyN.sh"

  distance=0

  //**Number of processes per tasks**//
  processes_bet_register_t1=4
  processes_major_filtering=4

  //**Output directory**//
  output_dir=false

  rois_folder="/extractor_flow/templates_and_ROIs/"

  //**Filtering List Folder**/
  FLF="/extractor_flow/filtering_lists/filtering_list_"

  //**Loop**//
  loop_angle_threshold=360

  min_streaminline_lenght=20
  max_streaminline_lenght=100000

  //**Process control**//
  processes = false

  //**Sides**//
  sides="L,R"

  cc_homotopic_pairs="AGWM,CingGWM,CuGWM,FuGWM,Hippo,IFGWM,Ins,IOGWM,ITGWM,LFOGWM,LGWM,MFGWM,MFOGWM,MOGWM,MTGWM,PHG,PoCGWM,PrCGWM,PrCuGWM,RGGWM,SFGWM,SMGWM,SOGWM,SPGWM,STGWM,T_pole_gwm"

  bg_lists="AGWM,CingGWM,CuGWM,ENT,FuGWM,Hippo,IFGWM,Ins,IOGWM,ITGWM,LFOGWM,LGWM,MFGWM,MFOGWM,MOGWM,MTGWM,PHG,PoCGWM,PrCGWM,PrCuGWM,RGGWM,SFGWM,SMGWM,SOGWM,SPGWM,STGWM,T_pole_gwm"
  bg_caud_lists="AGWM,CingGWM,IFGWM,Ins,ITGWM,LFOGWM,MFGWM,MFOGWM,MTGWM,PoCGWM,PrCGWM,PrCuGWM,RGGWM,SFGWM,SMGWM,SPGWM,STGWM,T_pole_gwm"


  asso_ventral_lists="O,P,T"
  asso_dorsal_f_o_f_t_lists="F_O_dorsal,F_T_dorsal"


  asso_dorsal_f_p_lists="F_P_dorsal_IFG,F_P_dorsal_MFG,F_P_dorsal_MiscG,F_P_dorsal_PrCG,F_P_dorsal_SFG"

  asso_p_o_lists="P_O_PoCG,P_O_SPG,P_O_SMG,P_O_AG,P_O_PrCuG"
  asso_p_t_lists="P_T_PoCG,P_T_SPG,P_T_SMG,P_T_AG,P_T_PrCuG"
  asso_o_t_lists="O_T_STG,O_T_MTG,O_T_ITG,O_T_Tpole,O_T_FuG,O_T_MTL"
  asso_ins_lists="Ins_F,Ins_P,Ins_O,Ins_T,"

  asso_frontal_be_lists="SFG,MFG,IFG,PrCG,FrOrbG"
  asso_occipital_be_lists="MOG,SOG,IOG,CuG,LG"
  asso_parietal_be_lists="PoCG,SPG,AG,SMG,PrCuG"
  asso_temporal_be_lists="STG,MTG,ITG,FuG"
  seeds="JHU_MNI_AGWM_,JHU_MNI_CingGWM_,JHU_MNI_CuGWM_,JHU_MNI_FuGWM_,JHU_MNI_IFGWM_,JHU_MNI_Ins_,JHU_MNI_IOGWM_,JHU_MNI_ITGWM_,JHU_MNI_LFOGWM_,JHU_MNI_LGWM_,JHU_MNI_MFGWM_,JHU_MNI_MFOGWM_,JHU_MNI_MOGWM_,JHU_MNI_MTGWM_,JHU_MNI_PoCGWM_,JHU_MNI_PrCGWM_,JHU_MNI_PrCuGWM_,JHU_MNI_RGGWM_,JHU_MNI_SFGWM_,JHU_MNI_SMGWM_,JHU_MNI_SOGWM_,JHU_MNI_SPGWM_,JHU_MNI_STGWM_,JHU_MNI_T_pole_gwm_,JHU_MNI_Hippo_,JHU_MNI_PHG_"

  //**ATLAS**//
  atlas.template="JHU_MNI_SS_T1_brain_182x218x182_conv_f.nii.gz"
  atlas.JHU_8="JHU_MNI_all_noDWM_all8.nii.gz"
  atlas.csf='JHU_MNI_CSF.nii.gz'
}

if(params.processes) {
    if(params.processes > Runtime.runtime.availableProcessors()) {
        throw new RuntimeException("Number of processes higher than available CPUs.")
    }
    else if(params.processes < 1) {
        throw new RuntimeException("When set, number of processes must be >= 1 " +
                                   "and smaller or equal to the number of CPUs.")
    }
    else {
        executor.$local.cpus = params.processes
    }
}

if(params.output_dir) {
    process.publishDir = [path:  {"$params.output_dir/intermediate_processes/$sid/$task.process"}, mode: 'copy', enabled: false]
    params.final_output_mni_space = [path: {"$params.output_dir/final_outputs/$sid/$params.template_space/"}, mode: 'copy']
    params.final_output_bundle_mni_space = [path: {"$params.output_dir/final_outputs/$sid/$params.template_space/bundles/"}, mode: 'copy']
    params.final_output_orig_space = [path: {"$params.output_dir/final_outputs/$sid/$params.orig_space/"}, mode: 'copy']
    params.final_output_bundles_orig_space = [path: {"$params.output_dir/final_outputs/$sid/$params.orig_space/bundles/"}, mode: 'copy']
}

if (params.keep_intermediate_steps) {
    cleanup = false
    if (params.output_dir) {
        process.publishDir = {"$params.output_dir/intermediate_processes/$sid/$task.process"}
        params.final_output_mni_space = {"$params.output_dir/final_outputs/$sid/$params.template_space/"}
        params.final_output_bundles_mni_space = {"$params.output_dir/final_outputs/$sid/$params.template_space/bundles/"}
        params.final_output_orig_space = {"$params.output_dir/final_outputs/$sid/$params.orig_space/"}
        params.final_output_bundles_orig_space = {"$params.output_dir/final_outputs/$sid/$params.orig_space/bundles/"}
    }
    else{
        process.publishDir = {"./results_extractorflow/intermediate_processes/$sid/$task.process"}
        params.final_output_mni_space = {"./results_extractorflow/final_outputs/$sid/$params.template_space/"}
        params.final_output_bundles_mni_space = {"./results_extractorflow/final_outputs/$sid/$params.template_space/bundles/"}
        params.final_output_orig_space = {"./results_extractorflow/final_outputs/$sid/$params.orig_space/"}
        params.final_output_bundles_orig_space = {"./results_extractorflow/final_outputs/$sid/$params.orig_space/bundles/"}
    }
}
else{
    if(params.output_dir) {
       process.publishDir = [path: {"$params.output_dir/intermediate_processes/$sid/$task.process"}, enabled: false]
       params.final_output_mni_space = [path: {"$params.output_dir/final_outputs/$sid/$params.template_space/"}, mode: 'copy']
       params.final_output_bundles_mni_space = [path: {"$params.output_dir/final_outputs/$sid/$params.template_space/bundles"}, mode: 'copy']
       params.final_output_orig_space = [path: {"$params.output_dir/final_outputs/$sid/$params.orig_space/"}, mode: 'copy']
    }
}

if(params.quick_registration)
{
  params.registration_script="antsRegistrationSyNQuick.sh"
}

profiles {
    fully_reproducible {
        params.processes_bet_register_t1=1
    }

    macos {
        process.scratch="/tmp"
    }

    extract_bundles {
        params.extended=true
    }
}
